import numpy as np

def floyd_warshall(n, edges):
    dist = np.full((n, n), float('inf'))
    
    for i in range(n):
        dist[i][i] = 0
    
    for u, v, w in edges:
        dist[u][v] = w
        dist[v][u] = w  

    print("Distance matrix before Floyd-Warshall:")
    print(dist)

    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][k] + dist[k][j] < dist[i][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]
    
    print("\nDistance matrix after Floyd-Warshall:")
    print(dist)

    return dist

def count_neighbors_within_threshold(dist, threshold):
    n = len(dist)
    max_count = 0
    city_with_max_neighbors = -1
    
    for i in range(n):
        count = sum(1 for j in range(n) if dist[i][j] <= threshold and i != j)
        if count > max_count:
            max_count = count
            city_with_max_neighbors = i
    
    return city_with_max_neighbors

def main():
    n = 5
    edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]]
    distance_threshold = 2

    dist = floyd_warshall(n, edges)
    
    city = count_neighbors_within_threshold(dist, distance_threshold)
    
    print("\nCity with the greatest number of neighbors within distance threshold:", city)

if __name__ == "__main__":
    main()
