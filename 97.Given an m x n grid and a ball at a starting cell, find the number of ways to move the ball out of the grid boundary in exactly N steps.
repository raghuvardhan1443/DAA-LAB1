def findWays(m, n, N, i, j):
    dp = [[[0] * n for _ in range(m)] for _ in range(N + 1)]
    
    dp[0][i][j] = 1
    
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    
    for step in range(N):
        new_dp = [[[0] * n for _ in range(m)] for _ in range(N + 1)]
        
        for x in range(m):
            for y in range(n):
                if dp[step][x][y] > 0:
                    for dx, dy in directions:
                        nx, ny = x + dx, y + dy
                        if 0 <= nx < m and 0 <= ny < n:
                            new_dp[step + 1][nx][ny] += dp[step][x][y]
                        else:
                            new_dp[step + 1][x][y] += dp[step][x][y]
        
        dp = new_dp
    
    result = 0
    for x in range(m):
        for y in range(n):
            if x == 0 or x == m - 1 or y == 0 or y == n - 1:
                result += dp[N][x][y]
    
    return result

m1, n1, N1, i1, j1 = 2, 2, 2, 0, 0
print(f"Number of ways to move the ball out of the grid: {findWays(m1, n1, N1, i1, j1)}")

m2, n2, N2, i2, j2 = 1, 3, 3, 0, 1
print(f"Number of ways to move the ball out of the grid: {findWays(m2, n2, N2, i2, j2)}")
