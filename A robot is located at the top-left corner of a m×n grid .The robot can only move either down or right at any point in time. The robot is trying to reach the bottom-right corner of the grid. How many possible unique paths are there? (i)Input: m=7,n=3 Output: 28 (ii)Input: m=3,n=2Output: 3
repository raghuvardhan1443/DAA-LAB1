def climbStairs(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    
    dp = [0] * (n + 1)
    dp[0] = 1
    dp[1] = 1
      def uniquePaths(m, n):
    dp = [[0] * n for _ in range(m)]
    
    for i in range(m):
        dp[i][0] = 1
    for j in range(n):
        dp[0][j] = 1
    
    for i in range(1, m):
        for j in range(1, n):
            dp[i][j] = dp[i-1][j] + dp[i][j-1]
    
    return dp[m-1][n-1]

m1, n1 = 7, 3
print(f"Number of unique paths in a {m1}x{n1} grid: {uniquePaths(m1, n1)}")  

m2, n2 = 3, 2
print(f"Number of unique paths in a {m2}x{n2} grid: {uniquePaths(m2, n2)}")  

    for i in range(2, n + 1):
        dp[i] = dp[i - 1] + dp[i - 2]
    
    return dp[n]

n1 = 4
print(f"Number of distinct ways to climb {n1} steps: {climbStairs(n1)}")  

n2 = 3
print(f"Number of distinct ways to climb {n2} steps: {climbStairs(n2)}")  
