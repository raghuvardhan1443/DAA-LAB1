def solveSudoku(board):
    def solve():
        for i in range(9):
            for j in range(9):
                if board[i][j] == '.':
                    for num in '123456789':
                        if isValid(i, j, num):
                            board[i][j] = num
                            if solve():
                                return True
                            board[i][j] = '.'
                    return False
        return True

    def isValid(row, col, num):
        return all(
            num not in (
                board[row][x] for x in range(9)
            ) and
            num not in (
                board[x][col] for x in range(9)
            ) and
            num not in (
                board[startRow + r][startCol + c]
                for r in range(3)
                for c in range(3)
            )
            for startRow, startCol in [(3 * (row // 3), 3 * (col // 3))]
        )

    solve()

board = [
    ['5', '3', '.', '.', '7', '.', '.', '.', '.'],
    ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
    ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
    ['8', '.', '.', '.', '6', '.', '.', '.', '3'],
    ['4', '.', '.', '8', '.', '3', '.', '.', '1'],
    ['7', '.', '.', '.', '2', '.', '.', '.', '6'],
    ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
    ['.', '.', '.', '4', '1', '9', '.', '.', '5'],
    ['.', '.', '.', '.', '8', '.', '.', '7', '9']
]

solveSudoku(board)

for row in board:
    print(row)
