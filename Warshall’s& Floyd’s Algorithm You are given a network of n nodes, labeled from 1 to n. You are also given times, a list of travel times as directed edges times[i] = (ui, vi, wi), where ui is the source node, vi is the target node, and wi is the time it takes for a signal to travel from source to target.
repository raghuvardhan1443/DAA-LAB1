import heapq
import math

def networkDelayTime(times, n, k):
    graph = {i: [] for i in range(1, n + 1)}
    for u, v, w in times:
        graph[u].append((v, w))
    
    distances = {node: math.inf for node in range(1, n + 1)}
    distances[k] = 0
    
    min_heap = [(0, k)]
    
    while min_heap:
        current_distance, u = heapq.heappop(min_heap)
        
        if current_distance > distances[u]:
            continue
        
        for v, weight in graph[u]:
            distance = current_distance + weight
            if distance < distances[v]:
                distances[v] = distance
                heapq.heappush(min_heap, (distance, v))
    
    max_distance = max(distances.values())
    
    return max_distance if max_distance < math.inf else -1

times = [[2, 1, 1], [3, 2, 1], [1, 3, 3]]
n = 3
k = 2
print(networkDelayTime(times, n, k))  # Output: 4
