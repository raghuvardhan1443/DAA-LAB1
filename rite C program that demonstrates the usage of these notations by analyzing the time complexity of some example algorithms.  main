#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void constantTimeAlgorithm() {
    int x = 5;  
    printf("Constant Time Algorithm: x = %d\n", x);
}

void linearTimeAlgorithm(int n) {
    for (int i = 0; i < n; i++) {
        volatile int temp = i; 
    }
}

void quadraticTimeAlgorithm(int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            volatile int temp = i * j;
        }
    }
}

int main() {
    clock_t start, end;
    double cpu_time_used;

    
    start = clock();
    constantTimeAlgorithm();
    end = clock();
    cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;
    printf("Time taken for O(1) algorithm: %f seconds\n", cpu_time_used);


    int n = 1000; 

    start = clock();
    linearTimeAlgorithm(n);
    end = clock();
    cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;
    printf("Time taken for O(n) algorithm with n = %d: %f seconds\n", n, cpu_time_used);
    start = clock();
    quadraticTimeAlgorithm(n);
    end = clock();
    cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;
    printf("Time taken for O(n^2) algorithm with n = %d: %f seconds\n", n, cpu_time_used);

    return 0;
}
