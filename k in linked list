#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

typedef struct ListNode {
    int val;
    struct ListNode *next;
} ListNode;

typedef struct {
    ListNode *node;
    int listIndex;
} HeapNode;

void swap(HeapNode *a, HeapNode *b) {
    HeapNode temp = *a;
    *a = *b;
    *b = temp;
}

void heapify(HeapNode heap[], int size, int i) {
    int smallest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < size && heap[left].node->val < heap[smallest].node->val) {
        smallest = left;
    }

    if (right < size && heap[right].node->val < heap[smallest].node->val) {
        smallest = right;
    }

    if (smallest != i) {
        swap(&heap[i], &heap[smallest]);
        heapify(heap, size, smallest);
    }
}

void push(HeapNode heap[], int *size, HeapNode element) {
    heap[*size] = element;
    int i = (*size)++;
    while (i > 0 && heap[i].node->val < heap[(i - 1) / 2].node->val) {
        swap(&heap[i], &heap[(i - 1) / 2]);
        i = (i - 1) / 2;
    }
}

HeapNode pop(HeapNode heap[], int *size) {
    HeapNode root = heap[0];
    heap[0] = heap[--(*size)];
    heapify(heap, *size, 0);
    return root;
}

ListNode* mergeKLists(ListNode** lists, int k) {
    if (k == 0) return NULL;

    HeapNode heap[k];
    int size = 0;
    ListNode dummy;
    ListNode *current = &dummy;
    dummy.next = NULL;

    for (int i = 0; i < k; i++) {
        if (lists[i] != NULL) {
            heap[size].node = lists[i];
            heap[size].listIndex = i;
            push(heap, &size, heap[size]);
        }
    }

    while (size > 0) {
        HeapNode minNode = pop(heap, &size);
        current->next = minNode.node;
        current = current->next;

        if (minNode.node->next != NULL) {
            minNode.node = minNode.node->next;
            push(heap, &size, minNode);
        }
    }

    current->next = NULL;
    return dummy.next;
}

ListNode* createNode(int val) {
    ListNode* newNode = (ListNode*)malloc(sizeof(ListNode));
    newNode->val = val;
    newNode->next = NULL;
    return newNode;
}

void printList(ListNode* head) {
    ListNode* current = head;
    while (current != NULL) {
        printf("%d -> ", current->val);
        current = current->next;
    }
    printf("NULL\n");
}

void freeList(ListNode* head) {
    ListNode* temp;
    while (head != NULL) {
        temp = head;
        head = head->next;
        free(temp);
    }
}

int main() {
    ListNode* list1 = createNode(1);
    list1->next = createNode(4);
    list1->next->next = createNode(5);

    ListNode* list2 = createNode(1);
    list2->next = createNode(3);
    list2->next->next = createNode(4);

    ListNode* list3 = createNode(2);
    list3->next = createNode(6);

    ListNode* lists[] = { list1, list2, list3 };
    int k = 3;

    ListNode* mergedList = mergeKLists(lists, k);
    
    printList(mergedList);

    freeList(mergedList);
    return 0;
}
