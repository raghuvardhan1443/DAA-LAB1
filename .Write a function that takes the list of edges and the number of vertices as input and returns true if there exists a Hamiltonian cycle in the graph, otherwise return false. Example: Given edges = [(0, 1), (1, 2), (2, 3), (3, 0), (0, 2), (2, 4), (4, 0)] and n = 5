def is_hamiltonian_cycle(graph, path, pos):
    if pos == len(graph):
        return graph[path[pos-1]][path[0]] == 1

    for v in range(1, len(graph)):
        if is_valid_vertex(graph, path, pos, v):
            path[pos] = v
            if is_hamiltonian_cycle(graph, path, pos + 1):
                return True
            path[pos] = -1  

    return False

def is_valid_vertex(graph, path, pos, v):
    if graph[path[pos-1]][v] == 0:
        return False

    
    if v in path:
        return False

    return True

def find_hamiltonian_cycle(edges, n):

    graph = [[0] * n for _ in range(n)]
    for u, v in edges:
        graph[u][v] = 1
        graph[v][u] = 1 

    path = [-1] * n
    path[0] = 0

    return is_hamiltonian_cycle(graph, path, 1)

def main():
    edges = [(0, 1), (1, 2), (2, 3), (3, 0), (0, 2), (2, 4), (4, 0)]
    n = 5 

    if find_hamiltonian_cycle(edges, n):
        print("Hamiltonian cycle exists.")
    else:
        print("Hamiltonian cycle does not exist.")

if __name__ == "__main__":
    main()
