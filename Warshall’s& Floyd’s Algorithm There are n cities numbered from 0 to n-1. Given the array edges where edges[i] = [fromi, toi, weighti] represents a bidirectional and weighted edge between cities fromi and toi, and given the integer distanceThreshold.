def findTheCity(n, edges, distanceThreshold):
    # Initialize the distance matrix
    INF = float('inf')
    dist = [[INF] * n for _ in range(n)]
    
    # Set the distance from each city to itself to be 0
    for i in range(n):
        dist[i][i] = 0

    # Set the distance for each edge
    for fromi, toi, weight in edges:
        dist[fromi][toi] = weight
        dist[toi][fromi] = weight
    
    # Floyd-Warshall algorithm
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][j] > dist[i][k] + dist[k][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]
    
    # Find the city with the smallest number of reachable cities
    min_count = float('inf')
    best_city = -1
    
    for i in range(n):
        count = 0
        for j in range(n):
            if dist[i][j] <= distanceThreshold:
                count += 1
        if count <= min_count:
            min_count = count
            best_city = i
    
    return best_city

n = 4
edges = [[0, 1, 3], [1, 2, 1], [2, 3, 4], [0, 2, 5]]
distanceThreshold = 4
print(findTheCity(n, edges, distanceThreshold))  
